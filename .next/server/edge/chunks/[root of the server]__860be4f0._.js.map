{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// Define all routes that require authentication\r\nconst protectedRoutes = [\r\n  '/dashboard',\r\n  '/services',\r\n  '/category',\r\n  '/landing',\r\n  '/blog',\r\n  '/testimonials',\r\n  '/booking',\r\n  '/usersetting',\r\n  '/logout',\r\n]\r\n\r\nexport function middleware(request: NextRequest) {\r\n\r\n  console.log(\"Middleware\"); // Debugging\r\n  const token = request.cookies.get('token') // Read token from browser cookies\r\n  console.log(\"Token in middleware:\", token); // Debugging token value\r\n  const { pathname } = request.nextUrl\r\n\r\n  // Check if the current path matches any protected route\r\n  const isProtected = protectedRoutes.some((route) =>\r\n    pathname.startsWith(route)\r\n  )\r\n\r\n  // If the route is protected and no token, redirect to login\r\n  if (isProtected && !token) {\r\n    console.log(\"Redirecting to login\"); // Debugging\r\n    const loginUrl = new URL('/', request.url)\r\n    return NextResponse.redirect(loginUrl)\r\n  }\r\n\r\n  return NextResponse.next()\r\n}\r\n\r\n// Apply middleware only to relevant routes\r\nexport const config = {\r\n  matcher: [\r\n    '/((?!api|trpc|_next|_vercel|.*\\\\..*).*)',\r\n    '/([\\\\w-]+)?/reset-password/(.+)',\r\n \r\n  ],\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,gDAAgD;AAChD,MAAM,kBAAkB;IACtB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,SAAS,WAAW,OAAoB;IAE7C,QAAQ,GAAG,CAAC,eAAe,YAAY;IACvC,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,SAAS,kCAAkC;;IAC7E,QAAQ,GAAG,CAAC,wBAAwB,QAAQ,wBAAwB;IACpE,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,wDAAwD;IACxD,MAAM,cAAc,gBAAgB,IAAI,CAAC,CAAC,QACxC,SAAS,UAAU,CAAC;IAGtB,4DAA4D;IAC5D,IAAI,eAAe,CAAC,OAAO;QACzB,QAAQ,GAAG,CAAC,yBAAyB,YAAY;QACjD,MAAM,WAAW,IAAI,IAAI,KAAK,QAAQ,GAAG;QACzC,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;QACA;KAED;AACH"}}]
}